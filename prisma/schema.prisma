// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  password  String?
  image     String?
  
  // NextAuth.js fields
  emailVerified DateTime?
  
  // Relations
  families Family[]
  scanHistory ScanHistory[]
  accounts Account[]
  sessions Session[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("users")
}

// NextAuth.js Account model
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// NextAuth.js Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// NextAuth.js VerificationToken model
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Family group for managing multiple people's allergies
model Family {
  id      String         @id @default(cuid())
  name    String
  members FamilyMember[]
  
  // Owner
  userId  String         @map("user_id")
  user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("families")
}

// Individual family member with their specific allergies
model FamilyMember {
  id        String    @id @default(cuid())
  name      String
  allergies Allergy[]
  
  // Relations
  familyId  String    @map("family_id")
  family    Family    @relation(fields: [familyId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("family_members")
}

// Specific allergy with severity level
model Allergy {
  id       String   @id @default(cuid())
  name     String   // "peanuts", "dairy", "gluten", "shellfish", etc.
  severity Severity // Severity level
  notes    String?  // Optional notes about the allergy
  
  // Relations
  memberId String       @map("member_id")
  member   FamilyMember @relation(fields: [memberId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("allergies")
}

// History of ingredient scans and AI analysis
model ScanHistory {
  id            String   @id @default(cuid())
  
  // Scan data
  ingredients   String   @db.Text // Raw ingredient list
  productName   String?  // Optional product name
  
  // AI Analysis results
  analysis      String   @db.Text // Detailed AI analysis
  detectedAllergies String[] // List of detected allergens
  riskLevel     RiskLevel // Overall risk assessment
  isProblematic Boolean  // Quick true/false for safety
  recommendations String[] // AI safety recommendations
  
  // Relations
  userId        String   @map("user_id")
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@map("scan_history")
}

// Enum for allergy severity levels
enum Severity {
  MILD            // Minor reaction, manageable
  MODERATE        // Noticeable reaction, needs attention
  SEVERE          // Serious reaction, requires medical attention
  LIFE_THREATENING // Anaphylaxis risk, emergency situation
}

// Enum for risk assessment levels
enum RiskLevel {
  LOW      // Safe for consumption
  MEDIUM   // Caution advised, check ingredients
  HIGH     // Likely contains allergens, avoid
  CRITICAL // Definitely contains severe allergens, DO NOT CONSUME
}